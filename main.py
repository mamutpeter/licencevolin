import os
import json
import psycopg2
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, CallbackQueryHandler, Filters, CallbackContext
)
from apscheduler.schedulers.background import BackgroundScheduler
import pytz

# === –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
DB_URL = os.getenv("DATABASE_URL")
ALLOWED_USER_IDS = [5826122049, 6887361815, 581331192, 1516381543, 1040255029]

STORE_KIOSKS_FILE = "store_ids_kiosks.json"
STORE_SHOPS_FILE = "store_ids_shops.json"

user_states = {}

main_keyboard = ReplyKeyboardMarkup([
    ["üç∑ –ê–ª–∫–æ–≥–æ–ª—å", "üö¨ –¢—é—Ç—é–Ω"]
], resize_keyboard=True, one_time_keyboard=True)

group_keyboard = ReplyKeyboardMarkup([
    ["üè™ –ú–∞–≥–∞–∑–∏–Ω–∏", "üö¨ –ö—ñ–æ—Å–∫–∏"]
], resize_keyboard=True, one_time_keyboard=True)

def get_conn():
    return psycopg2.connect(DB_URL)

def load_store_group(file):
    with open(file, "r", encoding="utf-8") as f:
        return json.load(f)

def get_license(key):
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT start_date, end_date FROM licenses WHERE license_key=%s", (key,))
            row = cur.fetchone()
            if row:
                return {'start_date': datetime.strptime(row[0], "%Y-%m-%d").date(),
                        'end_date': datetime.strptime(row[1], "%Y-%m-%d").date()}
    return None

def save_license(key, start, end):
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO licenses(license_key, start_date, end_date)
                VALUES (%s, %s, %s)
                ON CONFLICT (license_key) DO UPDATE SET start_date=%s, end_date=%s
            """, (key, start, end, start, end))
            conn.commit()

def start(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if chat_id not in ALLOWED_USER_IDS:
        update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return
    user_states[chat_id] = {"step": "choose_type"}
    update.message.reply_text("üç∑ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ª—ñ—Ü–µ–Ω–∑—ñ—ó:", reply_markup=main_keyboard)

def menu(update: Update, context: CallbackContext):
    start(update, context)

def handle_message(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    text = update.message.text.strip()
    state = user_states.get(chat_id)
    if chat_id not in ALLOWED_USER_IDS:
        return
    if not state:
        start(update, context)
        return

    # –û–ù–û–í–õ–ï–ù–ù–Ø –î–ê–¢ ‚Äî 1 –∫—Ä–æ–∫: –¥–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É
    if state.get("step") == "update_date_start":
        try:
            date_start = datetime.strptime(text, "%d.%m.%Y").date()
            state["date_start"] = date_start
            state["step"] = "update_date_end"
            update.message.reply_text("üìÖ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó (–î–î.–ú–ú.–†–†–†–†):")
        except:
            update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –î–î.–ú–ú.–†–†–†–†")
        return

    # –û–ù–û–í–õ–ï–ù–ù–Ø –î–ê–¢ ‚Äî 2 –∫—Ä–æ–∫: –¥–∞—Ç–∞ –∫—ñ–Ω—Ü—è
    if state.get("step") == "update_date_end":
        try:
            date_end = datetime.strptime(text, "%d.%m.%Y").date()
            key = state.get("license_key") or context.user_data.get("last_license_key")
            save_license(key, state["date_start"], date_end)
            update.message.reply_text("‚úÖ –î–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=ReplyKeyboardRemove())
            user_states.pop(chat_id, None)
        except:
            update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –î–î.–ú–ú.–†–†–†–†")
        return

    if state["step"] == "choose_type":
        if text not in ["üç∑ –ê–ª–∫–æ–≥–æ–ª—å", "üö¨ –¢—é—Ç—é–Ω"]:
            update.message.reply_text("‚ùå –í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=main_keyboard)
            return
        state["license_type"] = "alcohol" if text == "üç∑ –ê–ª–∫–æ–≥–æ–ª—å" else "tobacco"
        state["step"] = "choose_group"
        update.message.reply_text("üè™ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–æ—ó —Ç–æ—á–∫–∏:", reply_markup=group_keyboard)
        return

    if state["step"] == "choose_group":
        if text not in ["üè™ –ú–∞–≥–∞–∑–∏–Ω–∏", "üö¨ –ö—ñ–æ—Å–∫–∏"]:
            update.message.reply_text("‚ùå –í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=group_keyboard)
            return
        state["group"] = "shop" if text == "üè™ –ú–∞–≥–∞–∑–∏–Ω–∏" else "kiosk"
        # –ù–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ –∞–ª–∫–æ–≥–æ–ª—å –¥–ª—è –∫—ñ–æ—Å–∫—ñ–≤!
        if state["license_type"] == "alcohol" and state["group"] == "kiosk":
            update.message.reply_text(
                "üö´ –ö—ñ–æ—Å–∫–∏ –Ω–µ –º–∞—é—Ç—å –∞–ª–∫–æ–≥–æ–ª—å–Ω–æ—ó –ª—ñ—Ü–µ–Ω–∑—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç.",
                reply_markup=main_keyboard
            )
            state["step"] = "choose_type"
            return
        group_file = STORE_SHOPS_FILE if state["group"] == "shop" else STORE_KIOSKS_FILE
        stores = load_store_group(group_file)
        state["stores"] = stores
        state["step"] = "choose_store"
        msg = "–°–ø–∏—Å–æ–∫ —Ç–æ—á–æ–∫:\n" + "\n".join([f"{k}. {v}" for k, v in stores.items()])
        update.message.reply_text(msg)
        update.message.reply_text("üî¢ –í–≤–µ–¥—ñ—Ç—å —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ—ó —Ç–æ—á–∫–∏:")
        return

    if state["step"] == "choose_store":
        store_id = text.strip()
        if store_id not in state["stores"]:
            update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return
        state["store_id"] = store_id
        key = f"{state['group']}_{store_id}_{state['license_type']}"
        license_data = get_license(key)
        if license_data:
            date_start = license_data['start_date']
            date_end = license_data['end_date']
            days_left = (date_end - datetime.now().date()).days
            msg = (f"üìÑ –õ—ñ—Ü–µ–Ω–∑—ñ—è:\n"
                   f"–ü–æ—á–∞—Ç–æ–∫: {date_start.strftime('%d.%m.%Y')}\n"
                   f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {date_end.strftime('%d.%m.%Y')}\n"
                   f"‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {days_left} –¥–Ω—ñ–≤")
            buttons = [[InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –¥–∞—Ç–∏", callback_data="update_dates")]]
            reply_markup = InlineKeyboardMarkup(buttons)
            context.user_data["last_license_key"] = key  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–ª—è update
            update.message.reply_text(msg, reply_markup=reply_markup)
            user_states.pop(chat_id, None)
            return
        else:
            state["step"] = "enter_date_start"
            update.message.reply_text("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É –ª—ñ—Ü–µ–Ω–∑—ñ—ó (–î–î.–ú–ú.–†–†–†–†):")
            return

    if state["step"] == "enter_date_start":
        try:
            date_start = datetime.strptime(text, "%d.%m.%Y").date()
            state["date_start"] = date_start
            state["step"] = "enter_date_end"
            update.message.reply_text("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó (–î–î.–ú–ú.–†–†–†–†):")
        except:
            update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –î–î.–ú–ú.–†–†–†–†")
        return

    if state["step"] == "enter_date_end":
        try:
            date_end = datetime.strptime(text, "%d.%m.%Y").date()
            key = f"{state['group']}_{state['store_id']}_{state['license_type']}"
            save_license(key, state["date_start"], date_end)
            update.message.reply_text("‚úÖ –î–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", reply_markup=ReplyKeyboardRemove())
            user_states.pop(chat_id, None)
        except:
            update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –î–î.–ú–ú.–†–†–†–†")
        return

def handle_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    license_key = context.user_data.get("last_license_key")
    user_states[chat_id] = {
        "step": "update_date_start",
        "license_key": license_key
    }
    query.message.reply_text("üìÖ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É –ª—ñ—Ü–µ–Ω–∑—ñ—ó (–î–î.–ú–ú.–†–†–†–†):")

def risk(update: Update, context: CallbackContext):
    now = datetime.now().date()
    expired = []
    soon = []
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT license_key, start_date, end_date FROM licenses")
            for license_key, start_date, end_date in cur.fetchall():
                try:
                    end = datetime.strptime(end_date, "%Y-%m-%d").date()
                except:
                    continue
                days_left = (end - now).days
                if days_left < 0:
                    expired.append((license_key, abs(days_left), end))
                elif 0 <= days_left < 31:
                    soon.append((license_key, days_left, end))
    msg = ""
    if expired:
        msg += "‚ùå –ü–†–û–°–¢–†–û–ß–ï–ù–Ü –õ–Ü–¶–ï–ù–ó–Ü–á:\n"
        for lic, diff, end in expired:
            msg += f"{lic}: –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ –Ω–∞ {diff} –¥–Ω—ñ–≤ (–¥–æ {end.strftime('%d.%m.%Y')})\n"
    if soon:
        msg += "\n‚ö†Ô∏è –õ—ñ—Ü–µ–Ω–∑—ñ—ó, —â–æ –∑–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è –º–µ–Ω—à–µ –Ω—ñ–∂ –∑–∞ –º—ñ—Å—è—Ü—å:\n"
        for lic, left, end in soon:
            msg += f"{lic}: –∑–∞–ª–∏—à–∏–ª–æ—Å—å {left} –¥–Ω—ñ–≤ (–¥–æ {end.strftime('%d.%m.%Y')})\n"
    if not msg:
        msg = "‚úÖ –ù–µ–º–∞—î –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö —á–∏ —Ä–∏–∑–∏–∫–æ–≤–∏—Ö –ª—ñ—Ü–µ–Ω–∑—ñ–π!"
    update.message.reply_text(msg)

# ========== JOB –î–õ–Ø –ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø ==========
def check_licenses_job():
    now = datetime.now().date()
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT license_key, start_date, end_date FROM licenses")
            for license_key, start_date, end_date in cur.fetchall():
                try:
                    end = datetime.strptime(end_date, "%Y-%m-%d").date()
                except:
                    continue  # –Ø–∫—â–æ –¥–∞—Ç–∞ –∑—ñ–ø—Å–æ–≤–∞–Ω–∞ ‚Äî —ñ–≥–Ω–æ—Ä
                days_left = (end - now).days
                if 0 < days_left <= 3:
                    for user_id in ALLOWED_USER_IDS:
                        msg = (
                            f"‚è∞ –£–í–ê–ì–ê! –õ—ñ—Ü–µ–Ω–∑—ñ—è {license_key}\n"
                            f"–ó–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ {days_left} –¥–Ω—ñ!\n"
                            f"–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {end.strftime('%d.%m.%Y')}\n"
                            f"–¢–µ—Ä–º—ñ–Ω–æ–≤–æ –ø–æ–Ω–æ–≤—ñ—Ç—å –ª—ñ—Ü–µ–Ω–∑—ñ—é!"
                        )
                        try:
                            updater.bot.send_message(chat_id=user_id, text=msg)
                        except Exception as e:
                            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {user_id}: {e}")

def main():
    global updater
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("menu", menu))
    dp.add_handler(CommandHandler("risk", risk))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dp.add_handler(CallbackQueryHandler(handle_callback))

    scheduler = BackgroundScheduler(timezone=pytz.timezone('Europe/Kiev'))
    scheduler.add_job(check_licenses_job, "interval", hours=12)
    scheduler.start()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
